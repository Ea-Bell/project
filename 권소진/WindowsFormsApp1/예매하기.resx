<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>